//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Sandbox/Cases/CasesForInputSystem/CaseGamepadStretch/CaseGamepadStretchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Sandbox
{
    public partial class @CaseGamepadStretchControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CaseGamepadStretchControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CaseGamepadStretchControls"",
    ""maps"": [
        {
            ""name"": ""PlayerBaseControls"",
            ""id"": ""408e9d8a-27e1-4b13-8910-6261d3c4a7ad"",
            ""actions"": [
                {
                    ""name"": ""TimeStopHold"",
                    ""type"": ""Button"",
                    ""id"": ""77098e18-ad5f-4d0c-bb29-1c8e51acb03b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stretch"",
                    ""type"": ""Value"",
                    ""id"": ""50e22a40-c0ab-411e-a6bd-0c415ae50521"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b106c2c9-3a64-4330-8585-c1746490143c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d67f9569-9150-48d8-81c0-2643d78b162a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""TimeStopHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e63821fd-f4a9-4872-9ad4-61b86a9a0d6b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Stretch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyboardWASD"",
                    ""id"": ""31aebf7f-1315-45ef-9741-a09753f5e97c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a102d156-9b52-4797-af53-cf56982b2cf2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e360ff5a-3625-4a24-ae2a-3797941ca8db"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f9cb629c-14f8-4f8f-bde5-2531f3257a20"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a24b4802-7c34-4c62-be73-5eb4a8f0ea0f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyboardArrows"",
                    ""id"": ""9d17bf8e-d68d-4fd4-88a6-d0dcc2d9d9ab"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2f7aa4af-3fd9-4dfe-afe6-c02d840a556d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""40df4152-268d-400b-a313-ce5c47e00234"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""81dbb1ea-b8f8-4dc4-bc05-1ad7583fb206"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f69621f7-0310-4b79-b9ad-3417a7671d14"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""94770467-51f6-415f-9099-54ce94820ad5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerBaseControls
            m_PlayerBaseControls = asset.FindActionMap("PlayerBaseControls", throwIfNotFound: true);
            m_PlayerBaseControls_TimeStopHold = m_PlayerBaseControls.FindAction("TimeStopHold", throwIfNotFound: true);
            m_PlayerBaseControls_Stretch = m_PlayerBaseControls.FindAction("Stretch", throwIfNotFound: true);
            m_PlayerBaseControls_Move = m_PlayerBaseControls.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerBaseControls
        private readonly InputActionMap m_PlayerBaseControls;
        private IPlayerBaseControlsActions m_PlayerBaseControlsActionsCallbackInterface;
        private readonly InputAction m_PlayerBaseControls_TimeStopHold;
        private readonly InputAction m_PlayerBaseControls_Stretch;
        private readonly InputAction m_PlayerBaseControls_Move;
        public struct PlayerBaseControlsActions
        {
            private @CaseGamepadStretchControls m_Wrapper;
            public PlayerBaseControlsActions(@CaseGamepadStretchControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @TimeStopHold => m_Wrapper.m_PlayerBaseControls_TimeStopHold;
            public InputAction @Stretch => m_Wrapper.m_PlayerBaseControls_Stretch;
            public InputAction @Move => m_Wrapper.m_PlayerBaseControls_Move;
            public InputActionMap Get() { return m_Wrapper.m_PlayerBaseControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerBaseControlsActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerBaseControlsActions instance)
            {
                if (m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface != null)
                {
                    @TimeStopHold.started -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnTimeStopHold;
                    @TimeStopHold.performed -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnTimeStopHold;
                    @TimeStopHold.canceled -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnTimeStopHold;
                    @Stretch.started -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnStretch;
                    @Stretch.performed -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnStretch;
                    @Stretch.canceled -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnStretch;
                    @Move.started -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_PlayerBaseControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TimeStopHold.started += instance.OnTimeStopHold;
                    @TimeStopHold.performed += instance.OnTimeStopHold;
                    @TimeStopHold.canceled += instance.OnTimeStopHold;
                    @Stretch.started += instance.OnStretch;
                    @Stretch.performed += instance.OnStretch;
                    @Stretch.canceled += instance.OnStretch;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public PlayerBaseControlsActions @PlayerBaseControls => new PlayerBaseControlsActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardAndMouseSchemeIndex = -1;
        public InputControlScheme KeyboardAndMouseScheme
        {
            get
            {
                if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
                return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
            }
        }
        private int m_TouchScreenSchemeIndex = -1;
        public InputControlScheme TouchScreenScheme
        {
            get
            {
                if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
                return asset.controlSchemes[m_TouchScreenSchemeIndex];
            }
        }
        public interface IPlayerBaseControlsActions
        {
            void OnTimeStopHold(InputAction.CallbackContext context);
            void OnStretch(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
